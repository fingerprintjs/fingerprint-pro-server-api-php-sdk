<?php
/**
 * VelocityResult.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fingerprint Pro Server API.
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fingerprint\ServerAPI\Model;

use Fingerprint\ServerAPI\ObjectSerializer;

/**
 * VelocityResult Class Doc Comment.
 *
 * @category Class
 *
 * @description Sums key data points for a specific `visitorId` at three distinct time intervals: 5 minutes, 1 hour, and 24 hours as follows:  - Number of identification events attributed to the visitor ID - Number of distinct IP addresses associated to the visitor ID. - Number of distinct countries associated with the visitor ID. - Number of distinct `linkedId`s associated with the visitor ID. The `24h` interval of `distinctIp`, `distinctLinkedId`, and `distinctCountry` will be omitted if the number of `events` for the visitor ID in the last 24 hours (`events.intervals.['24h']`) is higher than 20.000.
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class VelocityResult implements ModelInterface, \ArrayAccess
{
    /**
     * The original name of the model.
     */
    protected static string $swaggerModelName = 'VelocityResult';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerTypes = [
        'distinct_ip' => '\Fingerprint\ServerAPI\Model\VelocityIntervals',
        'distinct_linked_id' => '\Fingerprint\ServerAPI\Model\VelocityIntervals',
        'distinct_country' => '\Fingerprint\ServerAPI\Model\VelocityIntervals',
        'events' => '\Fingerprint\ServerAPI\Model\VelocityIntervals'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerFormats = [
        'distinct_ip' => null,
        'distinct_linked_id' => null,
        'distinct_country' => null,
        'events' => null];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'distinct_ip' => 'distinctIp',
        'distinct_linked_id' => 'distinctLinkedId',
        'distinct_country' => 'distinctCountry',
        'events' => 'events'];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'distinct_ip' => 'setDistinctIp',
        'distinct_linked_id' => 'setDistinctLinkedId',
        'distinct_country' => 'setDistinctCountry',
        'events' => 'setEvents'];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'distinct_ip' => 'getDistinctIp',
        'distinct_linked_id' => 'getDistinctLinkedId',
        'distinct_country' => 'getDistinctCountry',
        'events' => 'getEvents'];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['distinct_ip'] = isset($data['distinct_ip']) ? $data['distinct_ip'] : null;
        $this->container['distinct_linked_id'] = isset($data['distinct_linked_id']) ? $data['distinct_linked_id'] : null;
        $this->container['distinct_country'] = isset($data['distinct_country']) ? $data['distinct_country'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['distinct_ip']) {
            $invalidProperties[] = "'distinct_ip' can't be null";
        }
        if (null === $this->container['distinct_linked_id']) {
            $invalidProperties[] = "'distinct_linked_id' can't be null";
        }
        if (null === $this->container['distinct_country']) {
            $invalidProperties[] = "'distinct_country' can't be null";
        }
        if (null === $this->container['events']) {
            $invalidProperties[] = "'events' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets distinct_ip.
     */
    public function getDistinctIp(): VelocityIntervals
    {
        return $this->container['distinct_ip'];
    }

    /**
     * Sets distinct_ip.
     *
     * @param VelocityIntervals $distinct_ip distinct_ip
     *
     * @return $this
     */
    public function setDistinctIp(VelocityIntervals $distinct_ip): self
    {
        $this->container['distinct_ip'] = $distinct_ip;

        return $this;
    }

    /**
     * Gets distinct_linked_id.
     */
    public function getDistinctLinkedId(): VelocityIntervals
    {
        return $this->container['distinct_linked_id'];
    }

    /**
     * Sets distinct_linked_id.
     *
     * @param VelocityIntervals $distinct_linked_id distinct_linked_id
     *
     * @return $this
     */
    public function setDistinctLinkedId(VelocityIntervals $distinct_linked_id): self
    {
        $this->container['distinct_linked_id'] = $distinct_linked_id;

        return $this;
    }

    /**
     * Gets distinct_country.
     */
    public function getDistinctCountry(): VelocityIntervals
    {
        return $this->container['distinct_country'];
    }

    /**
     * Sets distinct_country.
     *
     * @param VelocityIntervals $distinct_country distinct_country
     *
     * @return $this
     */
    public function setDistinctCountry(VelocityIntervals $distinct_country): self
    {
        $this->container['distinct_country'] = $distinct_country;

        return $this;
    }

    /**
     * Gets events.
     */
    public function getEvents(): VelocityIntervals
    {
        return $this->container['events'];
    }

    /**
     * Sets events.
     *
     * @param VelocityIntervals $events events
     *
     * @return $this
     */
    public function setEvents(VelocityIntervals $events): self
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
}
