<?php
/**
 * Response.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fingerprint Pro Server API.
 *
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fingerprint\ServerAPI\Model;

use Fingerprint\ServerAPI\ObjectSerializer;

/**
 * Response Class Doc Comment.
 *
 * @category Class
 *
 * @description Fields `lastTimestamp` and `paginationKey` added when `limit` or `before` parameter provided and there is more data to show
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Response implements ModelInterface, \ArrayAccess
{
    /**
     * The original name of the model.
     */
    protected static string $swaggerModelName = 'Response';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerTypes = [
        'visitor_id' => 'string',
        'visits' => '\Fingerprint\ServerAPI\Model\ResponseVisits[]',
        'last_timestamp' => 'int',
        'pagination_key' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $swaggerFormats = [
        'visitor_id' => null,
        'visits' => null,
        'last_timestamp' => 'int64',
        'pagination_key' => null];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'visitor_id' => 'visitorId',
        'visits' => 'visits',
        'last_timestamp' => 'lastTimestamp',
        'pagination_key' => 'paginationKey'];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'visitor_id' => 'setVisitorId',
        'visits' => 'setVisits',
        'last_timestamp' => 'setLastTimestamp',
        'pagination_key' => 'setPaginationKey'];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'visitor_id' => 'getVisitorId',
        'visits' => 'getVisits',
        'last_timestamp' => 'getLastTimestamp',
        'pagination_key' => 'getPaginationKey'];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['visitor_id'] = isset($data['visitor_id']) ? $data['visitor_id'] : null;
        $this->container['visits'] = isset($data['visits']) ? $data['visits'] : null;
        $this->container['last_timestamp'] = isset($data['last_timestamp']) ? $data['last_timestamp'] : null;
        $this->container['pagination_key'] = isset($data['pagination_key']) ? $data['pagination_key'] : null;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['visitor_id']) {
            $invalidProperties[] = "'visitor_id' can't be null";
        }
        if (null === $this->container['visits']) {
            $invalidProperties[] = "'visits' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets visitor_id.
     */
    public function getVisitorId(): string
    {
        return $this->container['visitor_id'];
    }

    /**
     * Sets visitor_id.
     *
     * @param string $visitor_id visitor_id
     *
     * @return $this
     */
    public function setVisitorId(string $visitor_id): self
    {
        $this->container['visitor_id'] = $visitor_id;

        return $this;
    }

    /**
     * Gets visits.
     *
     * @return \Fingerprint\ServerAPI\Model\ResponseVisits[]
     */
    public function getVisits(): array
    {
        return $this->container['visits'];
    }

    /**
     * Sets visits.
     *
     * @param \Fingerprint\ServerAPI\Model\ResponseVisits[] $visits visits
     *
     * @return $this
     */
    public function setVisits(array $visits): self
    {
        $this->container['visits'] = $visits;

        return $this;
    }

    /**
     * Gets last_timestamp.
     *
     * @return ?int
     */
    public function getLastTimestamp(): ?int
    {
        return $this->container['last_timestamp'];
    }

    /**
     * Sets last_timestamp.
     *
     * @param ?int $last_timestamp ⚠️ Deprecated paging attribute, please use `paginationKey` instead. Timestamp of the last visit in the current page of results.
     *
     * @return $this
     */
    public function setLastTimestamp(?int $last_timestamp): self
    {
        $this->container['last_timestamp'] = $last_timestamp;

        return $this;
    }

    /**
     * Gets pagination_key.
     *
     * @return ?string
     */
    public function getPaginationKey(): ?string
    {
        return $this->container['pagination_key'];
    }

    /**
     * Sets pagination_key.
     *
     * @param ?string $pagination_key Request ID of the last visit in the current page of results. Use this value in the following request as the `paginationKey` parameter to get the next page of results.
     *
     * @return $this
     */
    public function setPaginationKey(?string $pagination_key): self
    {
        $this->container['pagination_key'] = $pagination_key;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
}
